#include "quartz_guncode.hps"
#include "quartz_travelcode.hps"

void OnStart() {
	// gun setup
	GUNFUNCTION_Load();
	
	// fast travel setup
	FastTravelHub_Setup();
	
	// custom icons setup with initial and OnLook cases
	SetEntityPlayerLookAtCallback("fountain_Activate", "SetFountainIcon", false);
	SetEntityPlayerLookAtCallback("save_1", "SetBonfireIcon", false);
	SetEntityPlayerLookAtCallback("TeleportArea_save_*_bonfire", "SetTravelIcon", false);
	
	SetEntityPlayerInteractCallback("level_hub_1", "HouseDoorEnter", false);
	SetEntityPlayerInteractCallback("level_hub_2", "HouseDoorExit", false);
	
	// Messages
	SetEntityPlayerLookAtCallback("MessageArea_1", "RemoveMessage", true);
	SetEntityPlayerLookAtCallback("MessageArea_2", "RemoveMessage", true);
	
	// Bestiary entry variables to avoid duplicate entries
	SetGlobalVarInt("BeastGhoulVar", 0);
	SetGlobalVarInt("BeastGruntVar", 0);
	SetGlobalVarInt("BeastSuitorVar", 0);
	SetGlobalVarInt("BeastBruteVar", 0);
	SetGlobalVarInt("BeastWraithVar", 0);
}

void OnEnter()
{
    // travel functions
	Travel_NormalizePlayerSpeed();
	FastTravel_OnEnterResetter();
	FastTravel_UnlockBonfires();
	
	RespawnSelector();
	StartInsanityEvent("area_meadow");
	FadeIn(1);
	SetInDarknessEffectsActive(false);

	PlayMusic("amberlight_burgh_forestamb", true, 0.8f, 0, 0, true);

	SetEntityCustomFocusCrossHair("fountain_Activate", "Pick");
	SetEntityCustomFocusCrossHair("save_1", "Ignite");
	SetEntityCustomFocusCrossHair("TeleportArea_save_*_bonfire", "LevelDoor");
	
	// gun
	SetEntityPlayerInteractCallback("gunLantern", "AcquireGun", true);
	
	/*if (HasItem("gunLantern")) {
		SetLanternLitCallback( "GUNFUNCTION_Shoot" );
		SetGlobalVarInt("GunEffectsOn", 1);
	}
	else SetGlobalVarInt("GunEffectsOn", 0);*/
	SetGlobalVarInt("GunEffectsOn", 1);
	SetLanternLitCallback( "GUNFUNCTION_Shoot" );
	
	// demo
	if (GetGlobalVarInt("DemoEnded") == 3) {
		SetEntityCustomFocusCrossHair("DemoEndArea", "LevelDoor");
		SetEntityActive("DemoEndArea", true);
	}
	
	AutoSave();
}

// demo only
void LeaveDemo(string &in asEntity) {
	StartCredits("outro_requiem_penumbra.ogg", true, "Ending", "DemoCredits", 3);
}

void RespawnSelector() {
	if (Travel_DistanceCalculate("level_orb_room_door_1")) {
		CheckPoint ("checkpointVault", "PlayerStartArea_2", "RespawnStart", "", "");
	} else if (Travel_DistanceCalculate("block_box_1")) {
		CheckPoint ("checkpointHouse", "PlayerStartArea_5", "RespawnStart", "", "");
	} else if (Travel_DistanceCalculate("carriage")) {
		CheckPoint ("checkpointStart", "PlayerStartArea_1", "RespawnStart", "", "");
	}
}

void SetBackLevelProperties() {
	SetSkyBoxColor(1, 1, 1, 1);
	SetSkyBoxTexture("red_day.dds");
	SetFogActive(true);
}

void HouseDoorEnter(string &in asEntity) {
	TeleportPlayer("PlayerStartArea_6");
}

void HouseDoorExit(string &in asEntity) {
	TeleportPlayer("PlayerStartArea_5");
}

void Note1(string &in asEntity) {
	AddQuest("mainGoal", "MainGoal");
}

void RespawnBonfire(string &in asName, int alCount) {
	//RepositionAndRespawnEnemies();
	Travel_NormalizePlayerSpeed();
	SetPlayerHealth(100);
	SetPlayerLampOil(100);
	PlayMusic("amberlight_burgh_forestamb", true, 0.8f, 0, 0, true);
}

void RespawnStart(string &in asName, int alCount) {
	//RepositionAndRespawnEnemies();
	Travel_NormalizePlayerSpeed();
	PlayMusic("amberlight_burgh_forestamb", true, 0.8f, 0, 0, true);
}

/// DISPLAYING MESSAGE SIGNS

string displayMessage = "";

void Message1(string &in asEntity) {
	RemoveTimer("messageTimer");
	displayMessage = "FountainMessage";
	ShowMessageBackgroundLong(asEntity);
	AddTimer("messageTimer", 1.0f, "MessageTimerLong");
}

void Message2(string &in asEntity) {
	RemoveTimer("messageTimer");
	displayMessage = "FastTravelMessage";
	ShowMessageBackground(asEntity);
	AddTimer("messageTimer", 1.0f, "MessageTimer");
}

void ShowMessageBackground(string &in asEntity) {
	StartInsanityEvent("message_pergament");
	SetEntityPlayerLookAtCallback(asEntity, "RemoveMessage", true);
}

void ShowMessageBackgroundLong(string &in asEntity) {
	StartInsanityEvent("message_pergament_long");
	SetEntityPlayerLookAtCallback(asEntity, "RemoveMessage", true);
}

void MessageTimer(string &in asTimer) {
	SetMessage("Message", displayMessage, 4);
}

void MessageTimerLong(string &in asTimer) {
	SetMessage("Message", displayMessage, 8);
}

void RemoveMessage(string &in asEntity, int alState)
{
	if (alState == -1) {
		SetMessage("Message", "Empty", 1);
		StopCurrentInsanityEvent();
		RemoveTimer("messageTimer");
	}
}

///// end of message

void OnLeave() {
	FadeOut(0);
	StopCurrentInsanityEvent();
	
	DestroyDataCache();
}